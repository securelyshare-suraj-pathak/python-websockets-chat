# coding: utf-8

"""
    ShiftText

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@securelyshare.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ApiError(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attribute_name': 'str',
        'code': 'int',
        'debug_message': 'str',
        'http_status': 'str',
        'message': 'str',
        'status': 'int',
        'sub_errors': 'list[ApiSubError]',
        'timestamp': 'int'
    }

    attribute_map = {
        'attribute_name': 'attributeName',
        'code': 'code',
        'debug_message': 'debugMessage',
        'http_status': 'httpStatus',
        'message': 'message',
        'status': 'status',
        'sub_errors': 'subErrors',
        'timestamp': 'timestamp'
    }

    def __init__(self, attribute_name=None, code=None, debug_message=None, http_status=None, message=None, status=None, sub_errors=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """ApiError - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attribute_name = None
        self._code = None
        self._debug_message = None
        self._http_status = None
        self._message = None
        self._status = None
        self._sub_errors = None
        self._timestamp = None
        self.discriminator = None

        if attribute_name is not None:
            self.attribute_name = attribute_name
        if code is not None:
            self.code = code
        if debug_message is not None:
            self.debug_message = debug_message
        if http_status is not None:
            self.http_status = http_status
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if sub_errors is not None:
            self.sub_errors = sub_errors
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ApiError.  # noqa: E501

        Attribute name that caused the error.  # noqa: E501

        :return: The attribute_name of this ApiError.  # noqa: E501
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ApiError.

        Attribute name that caused the error.  # noqa: E501

        :param attribute_name: The attribute_name of this ApiError.  # noqa: E501
        :type: str
        """

        self._attribute_name = attribute_name

    @property
    def code(self):
        """Gets the code of this ApiError.  # noqa: E501

        Error code  # noqa: E501

        :return: The code of this ApiError.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ApiError.

        Error code  # noqa: E501

        :param code: The code of this ApiError.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def debug_message(self):
        """Gets the debug_message of this ApiError.  # noqa: E501

        Error detailed message for debug operations  # noqa: E501

        :return: The debug_message of this ApiError.  # noqa: E501
        :rtype: str
        """
        return self._debug_message

    @debug_message.setter
    def debug_message(self, debug_message):
        """Sets the debug_message of this ApiError.

        Error detailed message for debug operations  # noqa: E501

        :param debug_message: The debug_message of this ApiError.  # noqa: E501
        :type: str
        """

        self._debug_message = debug_message

    @property
    def http_status(self):
        """Gets the http_status of this ApiError.  # noqa: E501

        HTTP Status  # noqa: E501

        :return: The http_status of this ApiError.  # noqa: E501
        :rtype: str
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this ApiError.

        HTTP Status  # noqa: E501

        :param http_status: The http_status of this ApiError.  # noqa: E501
        :type: str
        """
        allowed_values = ["400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "425 TOO_EARLY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and http_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `http_status` ({0}), must be one of {1}"  # noqa: E501
                .format(http_status, allowed_values)
            )

        self._http_status = http_status

    @property
    def message(self):
        """Gets the message of this ApiError.  # noqa: E501

        Error message  # noqa: E501

        :return: The message of this ApiError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiError.

        Error message  # noqa: E501

        :param message: The message of this ApiError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this ApiError.  # noqa: E501

        HTTP Status code  # noqa: E501

        :return: The status of this ApiError.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiError.

        HTTP Status code  # noqa: E501

        :param status: The status of this ApiError.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def sub_errors(self):
        """Gets the sub_errors of this ApiError.  # noqa: E501

        List of nested errors  # noqa: E501

        :return: The sub_errors of this ApiError.  # noqa: E501
        :rtype: list[ApiSubError]
        """
        return self._sub_errors

    @sub_errors.setter
    def sub_errors(self, sub_errors):
        """Sets the sub_errors of this ApiError.

        List of nested errors  # noqa: E501

        :param sub_errors: The sub_errors of this ApiError.  # noqa: E501
        :type: list[ApiSubError]
        """

        self._sub_errors = sub_errors

    @property
    def timestamp(self):
        """Gets the timestamp of this ApiError.  # noqa: E501

        When it happened  # noqa: E501

        :return: The timestamp of this ApiError.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ApiError.

        When it happened  # noqa: E501

        :param timestamp: The timestamp of this ApiError.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiError):
            return True

        return self.to_dict() != other.to_dict()
